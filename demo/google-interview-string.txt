class Solution {
    public int isPrefixOfWord(String sentence, String searchWord) {
        Trie trie = new Trie();
        String[] strArr = sentence.split(" ");
        for(int i = 0; i < strArr.length; i++){
            trie.insert(strArr[i]);
        }
        for(int i = 0; i < strArr.length; i++){
            if(trie.startsWith(searchWord)){
                int j = 0; 
                while(j < strArr.length){
                    if(strArr[j].startsWith(searchWord))
                        return j;
                    j++;
                }
            }
        }
        return -1 ;
    }
    class Trie{
        Node root;
        Trie(){
            root = new Node('\0');
        }
        void insert(String word){
            Node curr = root;
            for(char c : word.toCharArray()){
                if(curr.children[c - 'a'] == null){
                    curr.children[c - 'a'] = new Node(c);
                }
                curr = curr.children[c - 'a'];
            }
            curr.isWord = true;
        }
        boolean search(String word){
            Node node = getNode(word);
            return node != null && node.isWord; 
        }
        boolean startsWith(String word){
            Node curr = getNode(word);
            return curr != null;
        }
        Node getNode(String word){
            Node curr = root;
            for(char c : word.toCharArray()){
                if(curr.children[c - 'a'] == null){
                    return null;
                }
                curr = curr.children[c - 'a'];
            }
            return curr;
        }
        class Node{
            char c;
            boolean isWord;
            Node[] children;
            Node(char c){
                this.c = c;
                this.children = new Node[26];
            }
        }
    }
}

class Solution {
    public String longestNiceSubstring(String s) {
        if(s == null || s.length() < 2)
            return "";

        Set<Character> set = new HashSet<>();
        for(char c : s.toCharArray()){
            set.add(c);
        }
        for(int i = 0; i < s.length(); i++){
            if(set.contains(Character.toLowerCase( s.charAt(i))) && set.contains(Character.toUpperCase(s.charAt(i))) ){
                continue;
            }
            String sub1 = longestNiceSubstring(s.substring(0, i));
            String sub2 = longestNiceSubstring(s.substring(i + 1, s.length() ));
            return sub1.length() >= sub2.length() ? sub1 : sub2;
        }
        return s;
    }
}


//TLE
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        if(nums == null || nums.length < k )
            return 0.0;
        double result = 0.0;
        for(int i = k; i <= nums.length; i++){
            for(int j = 0; j <= nums.length - i; j++){
                int k = i + j - 1;
                double sum = 0;
                for(int l = j; l <= k ; l++){
                    sum += nums[l];
                }
                result = Math.max(result, sum / k)
            }
        }
        return result;
    }
}


class Solution {
    public double findMaxAverage(int[] nums, int k) {

    }
}


class Solution {
    public int numberOfSubstrings(String s) {
        int result = 0;
        if(s == null || s.length < 3){
            return 0;
        }
        for(int i = 3; i <= s.length(); i++){
            for(int j = 0; j <= s.length() - i; j++){
                int k = i + j;
                String sub = s.substring(j, k);
                if(sub.contains("a") && sub.contains("b") && sub.contains("c"))
                    result++;
            }
        }
        return result;
    }
}


class Solution {
    public int longestSubarray(int[] nums) {
        int result = 0, count = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0){
                int j = i - 1;
                while(j >= 0){
                    if(nums[j] == 1){
                        count++;
                    }
                    else{
                        break;
                    }
                }
                j = i + 1;
                while(j < nums.length){
                    if(nums[j] == 1){
                        count++;
                    }
                    else{
                        break;
                    }
                }
                result = Math.max(result, count);
                count = 0;
            }
        }
        count = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 1){
                count++;
            }
            else{
                break;
            }
        }
        return result = Math.max(result, count);
    }
}

class Solution {
    public int arrayPairSum(int[] nums) {
        if(nums == null || nums.length % 2 != 0){
            return -1;
        }
        int result = 0;
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i+=2){
            result += Math.min(nums[i], nums[i + 1]);
        }
        return result;
    }
}

class Solution {
    public int minCostToMoveChips(int[] position) {
        int odd = 0, even = 0, min = 0;
        for(int i : position){
            if(i % 2 == 0){
                even++;
            }
            else{
                odd++;
            }
            min = Math.min(odd, even);
        }
        return min;
    }
}

class Solution {
    public int minTimeToType(String word) {
        int result = word.length();
        char prev = 'a';
        for(int i = 0; i < word.length(); i++){
            char curr = word.charAt(i);
            int diff = Math.abs(curr - prev);
            result += Math.min(diff, 26 - diff);
            prev = curr;
        }
        return result;  
    }
}


class Solution {
    public int maxDistance(int[] colors) {
        int result = 0;
        for(int i = 0; i < colors.length; i++){
            for(int j = i + 1; j < colors.length; j++){
                if(colors[j] != colors[i]){
                    result = Math.max(result, j - i);
                }
            }
        }
        return result;
    }
}

class Solution {
    public int minimumCost(int[] cost) {
        int result = 0;
        if(cost.length < 2){
            return result;
        }
        Arrays.sort(cost, (a, b) -> b - a);
        for(int i = 0; i < cost.length; i++){
            if(i % 3 != n % 3){
                result += cost[i];
            }
        }
        return result;
    }
}


class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        int i = 0;
        for(int j = 0; i < g.length && j < s.length ; j++){
            if(g[i] <= s[j])
                i++;
        }
        return i;
    }
}


class Solution {
    public boolean canThreePartsEqualSum(int[] arr) {
       if(arr == null || arr.length < 3){
            return false;
       }
       //Arrays.sort(arr); // Don't sort, after sorting elements will be shuffled and it will give wrong result.
       int totalSum  = getAverage(arr);
        if(totalSum % 3 != 0)
            return false;
        int average = totalSum / 3;
        int sum = 0, res = 0;
        for(int i = 0; i < arr.length; i++){
            sum += arr[i];
            if(sum == average){
                res++;
                sum = 0;
            }
        }
        return res >= 3;
    }
    
    int getAverage(int[] arr){
        int sum = 0;
        for(int val : arr){
            sum += val;
        }
        return sum;
    }
}

// TLE
class Solution {
    public boolean validPalindrome(String s) {
        if(s == null || s.isEmpty()){
            return true;
        }
        for(int i = 0; i < s.length(); i++){
            StringBuilder sb = new StringBuilder();
            for(int j = 0; j < s.length(); j++){
                if(i == j)
                    continue;
                sb.append(s.charAt(j));
            }
            boolean isValid = isPalindrom(sb.toString());
            if(isValid)
                return true;
        }
        return false;
    }
    boolean isPalindrom(String str){
        int i = 0, j = str.length() - 1;
        while(i < j){
            if(str.charAt(i) != str.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}

class Solution {
    public boolean validPalindrome(String s) {
        int i = 0, j = s.length() - 1;
        while(i < j){
            if(s.charAt(i) != s.charAt(j)){
                return isPalindrom(s, i + 1, j) || isPalindrom(s, i, j - 1));
            }
            i++;
            j--;        
        }
        return true;
    }
    boolean isPalindrom(String str, int i, int j ){
        while(i < j){
            if(str.charAt(i) != str.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}


 class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if(n == 0) return true;
        for(int i = 0; i < flowerbed.length; i++){
           if(flowerbed[i] == 0 
               && ( i == 0 || flowerbed[i - 1] == 0 ) 
               && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {
                --n;
                if(n == 0)
                    return true;
                flowerbed[i] = 1;
            }
        }
        return false;
    }
}

class Solution {
    public int minPartitions(String n) {
        int max = 0;
        for(int i = 0; i < n; i++){
            max = Math.max(max, n.charAt(i) - '0');
        }
        return max;
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode balanceBST(TreeNode root) {
        if(root == null){
            return null;
        }
        int[] inorder = inorder(root);
        return buildTree(inorder,0, inorder.length - 1);
    }
    TreeNode buildTree(int[] nums, int start, int end){
        if(start >= end ){
            return null;
        }
        int mid = (start + end) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = buildTree(nums, start , mid - 1);
        root.right = buildTree(nums, mid + 1, end);
        return root;
    }
    int[] inorder(TreeNode root){
        if(root ==  null)
            return new int[]{};
        List<Integer> list = new ArrayList<>();
        Stack<TreeNode> s = new Stack<>();
        while(!s.isEmpty() || root != null){
            if(root != null){
                s.push(root);
                root = root.left;
            }
            else{
                TreeNode temp = s.pop();
                list.add(temp.val);
                root = temp.right;
            }
        }
        int[] result = new int[list.size()];
        for(int i = 0; i < list.size(); i++){
            result[i] = list.get(i);
        }
        return result;
    }
}


class Solution {
    public List<Integer> partitionLabels(String s) {
        if(s == null || s.length() == 0){
            return null;
        }

        int[] indices = new int[26];
        for(int i = 0; i < s.length(); i++){
            indices[s.charAt(i) - 'a'] = i; 
        }
        List<Integer> result = new ArrayList<>();
        int start = 0;
        int end = 0;
        for(int i = 0; i < s.length(); i++){
            end = Math.max(end, indices[s.charAt(i) - 'a']);
            if(i == end){
                result.add(end - start + 1);
                start = end + 1;
            }
        }
        return result;
    }
}


class Solution {
    public int[][] restoreMatrix(int[] rowSum, int[] colSum) {
        int[][] result = new int[rowSum.length][colSum.length];

        for(int i = 0; i < rowSum.length; i++){
            for(int j = 0; j < colSum.length; j++){
                int min = Math.min(rowSum[i], colSum[j]);
                result[i][j] = min;
                rowSum[i] = rowSum[i] - min;
                colSum[j] = colSum[j] - min;
            }
        }
        return result;
    }
}

class Solution {
    public int maxCoins(int[] piles) {
        Arrays.sort(piles);
        int result  = 0;
        for(int i = piles.length / 3; i < piles.length; i += 2){
            result += piles[i];
        }
        return result;
    }
}
class Solution {
    public int minAddToMakeValid(String s) {
        if(s == null || s.isEmpty())
            return 0;
        int result = 0;
        Stack<Character> stack = new Stack<>();
        for(char c : s.toCharArray()){
            if(c == '('){
                stack.push(c);
            }
            else if(!stack.isEmpty()){
                stack.pop();
            }
            else{
                result++;
            }
        }
        return result + stack.size();
    }
}
class Solution {
    public int minFlips(String target) {
        int result = target.charAt(0) - 'a';
        for(int i = 1; i < target.length(); i++){
            if(target.charAt(i) != target.charAt(i - 1))
                result++;
        }
        return result;
        
    }
}

class Solution {
    public int minSetSize(int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < arr.length; i++){
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        int[] values = new int[map.keySet().size()];
        int index = 0;
        for(int key : map.keySet()){
            values[index++] = map.get(key);
        }
        Arrays.sort(values);
        int i = 0, sum = 0;
        for(i = values.length - 1 ; i >= 0; i--){
            sum += values[i];
            if(sum >= arr.length / 2)
                break;
        }
        return values.length - i;
    }
}

class Solution {
    public int minSwaps(String s) {
        int close, maxClose = 0;
        for(char c : s.toCharArray()){
            close = c == '[' ? --close : ++close;
            maxClose = Math.max(maxClose, close);
        }
        return (maxClose + 1) / 2 ;

    }
}
class Solution {
    public int minSwaps(String s) {
        int open = 0, swaps = 0, j = s.length() - 1;
        char[] arr = s.toCharArray();
        for(int i = 0; i < arr.length; i++){
            if(arr[i] == '[')
                open++;
            else
                open--;
            
            if(open < 0){
                while(i < j && s.charAt(j) != '[')
                    j--;
                char temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                swaps++;
                open++;
            }
        }
        return swaps;
    }
}


class Solution {
    int min = Integer.MAX_VALUE;
    public int findMinFibonacciNumbers(int k) {
        List<Integer> fibs = new ArrayList<>();
        int first = 0, second = 1, third = 1;
        fibs.add(0);
        fibs.add(1);
        fibs.add(1);
        while(third < k ){
            first = second;
            second = third;
            third = first + second;
            fibs.add(third);
        }
        backtrack(fibs, new ArrayList<>(), 0, k);
        return min;
    }

    void backtrack(List<Integer> fibs, List<Integer> list, int start, int target){
        int sum = 0;
        if(start == fibs.size()) return;
        for(int e : list){
            sum += e;
        }
        if(sum == target){
            min = Math.min(min, list.size());
        }
        if(sum > target)
            return;
        for(int i = start; i < fibs.size(); i++ ){
            list.add(fibs.get(i));
            backtrack(fibs, list, i + 1, target);
            list.remove(list.size() - 1);
        }
    }
}

class Solution {
    public int maxIceCream(int[] costs, int coins) {
        Arrays.sort(costs);
        for(int i = 0; i < costs.length; i++){
            if(coins >= costs[i]){
                coins = coins - costs[i] // Boy will buy the ice-cream, and amount will be deducted from total amount;
            }
            else{
                return i; // i'th number of candy, will be able to buy
            }
        }
        return costs.length; // Boy will be able to buy all the candies.
    }
}
class Solution {
    public int maxProfit(int[] prices) {
        int max = Integer.MIN_VALUE, result = 0;
        for(int i = 1; i < prices.length; i++){
            max = Math.max(0, prices[i] - prices[i - 1]);
            result += max;
        }
        return result;
    }
}
class Solution {
    public int minCost(String colors, int[] neededTime) {
       int result = 0;
       for(int i = 1; i < colors.length(); i++){
           if(colors.charAt(i) == colors.charAt(i - 1)){
               result += Math.min(neededTime[i] , neededTime[i - 1]);
               neededTime[i] = Math.max(neededTime[i], neededTime[i - 1]);
           }
       }
       return result;
    }
}
